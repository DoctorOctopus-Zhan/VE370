$date
	Sun Oct 27 16:17:09 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module singleCycleTestBench $end
$scope module uut $end
$var wire 1 ! _branch $end
$var wire 1 " clk $end
$var wire 5 # write_reg [4:0] $end
$var wire 32 $ write_data [31:0] $end
$var wire 32 % sign_extend_output [31:0] $end
$var wire 32 & read_reg_data_2 [31:0] $end
$var wire 32 ' read_reg_data_1 [31:0] $end
$var wire 32 ( pc_out [31:0] $end
$var wire 32 ) pc_in [31:0] $end
$var wire 32 * next_instruction_addr [31:0] $end
$var wire 32 + next_addr [31:0] $end
$var wire 32 , jump_addr [31:0] $end
$var wire 32 - instruction [31:0] $end
$var wire 32 . data_memory_read_data [31:0] $end
$var wire 1 / _reg_write $end
$var wire 1 0 _reg_dst $end
$var wire 1 1 _mem_write $end
$var wire 1 2 _mem_to_reg $end
$var wire 1 3 _mem_read $end
$var wire 1 4 _jump $end
$var wire 1 5 _bne $end
$var wire 1 6 _beq $end
$var wire 1 7 _ALU_src $end
$var wire 1 8 ALU_zero_ouput $end
$var wire 32 9 ALU_second_input [31:0] $end
$var wire 32 : ALU_result [31:0] $end
$var wire 2 ; ALU_op [1:0] $end
$var wire 4 < ALU_control [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10 <
b0 ;
b100000 :
b100000 9
08
17
06
05
04
03
02
01
00
1/
b0 .
b100000000010000000000000100000 -
b1000000000000010000000 ,
b100 +
b100 *
b100 )
b0 (
b0 '
b0 &
b100000 %
b100000 $
b1000 #
0"
0!
$end
#10000
b110111 $
b110111 :
b110111 9
b1001 #
b110111 %
b1001000000000011011100 ,
b1000 )
b100000000010010000000000110111 -
b1000 *
b1000 +
b100 (
1"
#20000
b110111 &
0"
#30000
18
b10000 #
b0 <
b10 ;
07
10
b0 $
b0 :
b110111 9
b11111111111111111000000000100100 %
b100001001100000000010010000 ,
b1100 )
b1000010011000000000100100 -
b1100 *
b1100 +
b1000 (
1"
#40000
0"
#50000
b110111 $
08
b110111 :
b1 <
b11111111111111111000000000100101 %
b100001001100000000010010100 ,
b10000 )
b1000010011000000000100101 -
b10000 *
b10000 +
b1100 (
1"
#60000
0"
#70000
b100 $
b100 :
b100 9
b10 <
b0 ;
0/
17
11
00
b10000 #
b100 %
b10000000000000000010000 ,
b10100 )
b10101100000100000000000000000100 -
b10100 *
b10100 +
b10000 (
1"
#80000
0"
#90000
b1000 $
b1000 :
b1000 9
b1000 #
b1000 %
b0 &
b1000000000000000100000 ,
b11000 )
b10101100000010000000000000001000 -
b11000 *
b11000 +
b10100 (
1"
#100000
0"
#110000
b10 ;
1/
07
01
10
b110111 $
b110111 :
b110111 9
b10001 #
b11111111111111111000100000100000 %
b110111 &
b100001001100010000010000000 ,
b11100 )
b1000010011000100000100000 -
b11100 *
b11100 +
b11000 (
1"
#120000
0"
#130000
b11111111111111111111111111001001 $
b11111111111111111111111111001001 :
b110 <
b10010 #
b11111111111111111001000000100010 %
b100001001100100000010001000 ,
b100000 )
b1000010011001000000100010 -
b100000 *
b100000 +
b11100 (
1"
#140000
0"
#150000
b1 ;
0/
16
b1101110 $
b11111111111111111111111111001001 9
08
b1101110 :
b0 #
b1001 %
b11111111111111111111111111001001 &
b110111 '
b1000110010000000000000100100 ,
b100100 )
b10010001100100000000000001001 -
b100100 *
b100100 +
b100000 (
1"
#160000
0"
#170000
b110111 .
b10001 #
b10 <
b0 ;
1/
17
12
13
06
00
b110111 $
b100 9
b100 :
b100 %
b110111 &
b0 '
b10001000000000000010000 ,
b101000 )
b10001100000100010000000000000100 -
b101000 *
b101000 +
b100100 (
1"
#180000
0"
#190000
18
b0 <
b11 ;
02
03
b0 $
b0 .
b1001000 9
b0 :
b10010 #
b1001000 %
b11111111111111111111111111001001 &
b110111 '
b1000110010000000000100100000 ,
b101100 )
b110010001100100000000001001000 -
b101100 *
b101100 +
b101000 (
1"
#200000
b0 &
0"
#210000
b0 #
b110 <
b1 ;
0/
07
16
10
b110111 $
08
b110111 :
b0 9
b1001 %
b1000110010000000000000100100 ,
b110000 )
b10010001100100000000000001001 -
b110000 *
b110000 +
b101100 (
1"
#220000
0"
#230000
b1000 9
b10011 #
b10 <
b0 ;
1/
17
12
13
06
00
0!
b0 $
08
b1000 :
b1000 %
b0 '
b10011000000000000100000 ,
b110100 )
b10001100000100110000000000001000 -
b110100 *
b110100 +
b110000 (
1"
#240000
0"
#250000
b110111 $
b0 #
b110 <
b1 ;
0/
07
02
03
16
10
b0 9
b110111 :
b1010 %
b110111 '
b1000010011000000000000101000 ,
b111000 )
b10010000100110000000000001010 -
b111000 *
b111000 +
b110100 (
1"
#260000
0"
#270000
b111 <
b10 ;
1/
06
0!
b1 $
b110111 9
08
b1 :
b10100 #
b11111111111111111010000000101010 %
b110111 &
b0 '
b1001010001101000000010101000 ,
b111100 )
b10010100011010000000101010 -
b111100 *
b111100 +
b111000 (
1"
#280000
0"
#290000
0!
b110 <
b1 ;
0/
16
b1 $
08
b1 :
b0 9
b0 #
b1111 %
b0 &
b1 '
b1010000000000000000000111100 ,
b1000000 )
b10010100000000000000000001111 -
b1000000 *
b1000000 +
b111100 (
1"
#300000
0"
#310000
b10 <
b10 ;
1/
06
b110111 $
b110111 :
b10010 #
b11111111111111111001000000100000 %
b110111 '
b1000100000100100000010000000 ,
b1000100 )
b10001000001001000000100000 -
b1000100 *
b1000100 +
b1000000 (
1"
#320000
0"
#330000
0/
14
b0 $
18
b0 :
b0 #
b1110 %
b0 '
b111000 ,
b111000 )
b1000000000000000000000001110 -
b1001000 *
b1001000 +
b1000100 (
1"
#340000
0"
#350000
1/
04
b0 $
b111 <
b110111 9
18
b0 :
b10100 #
b111100 )
b11111111111111111010000000101010 %
b110111 &
b110111 '
b1001010001101000000010101000 ,
b10010100011010000000101010 -
b111100 *
b111100 +
b111000 (
1"
#360000
0"
#370000
1!
b110 <
b1 ;
0/
16
b0 $
b0 9
18
b0 :
b0 #
b1111 %
b0 &
b0 '
b1010000000000000000000111100 ,
b1111100 )
b10010100000000000000000001111 -
b1111100 *
b1000000 +
b111100 (
1"
#380000
0"
#390000
0!
b10 ;
1/
06
b0 %
b0 ,
b10000000 )
b0 -
b10000000 *
b10000000 +
b1111100 (
1"
#400000
0"
#410000
b10000100 )
b10000100 *
b10000100 +
b10000000 (
1"
#420000
0"
#430000
b10001000 )
b10001000 *
b10001000 +
b10000100 (
1"
#440000
0"
#450000
b10001100 )
b10001100 *
b10001100 +
b10001000 (
1"
#460000
0"
#470000
b10010000 )
b10010000 *
b10010000 +
b10001100 (
1"
#480000
0"
#490000
b10010100 )
b10010100 *
b10010100 +
b10010000 (
1"
#500000
